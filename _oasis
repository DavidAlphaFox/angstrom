OASISFormat: 0.4
Name:        angstrom
Version:     dev
Authors:     Spiros Eliopoulos <spiros@inhabitedtype.com>
Maintainers: Spiros Eliopoulos <spiros@inhabitedtype.com>
Homepage:    https://github.com/inhabitedtype/angstrom
Copyrights:  (C) 2016 Inhabited Type LLC
License:     BSD-3-clause
Plugins:     META (0.4), DevFiles (0.4)
BuildTools: ocamlbuild
Synopsis:    Parser combinators built for speed and memory-efficiency
Description:
   Angstrom is a parser-combinator library that makes it easy to write
   efficient, expressive, and reusable parsers suitable for high-performance
   applications. It exposes monadic and applicative interfaces for composition,
   and supports incremental input through buffered and unbuffered interfaces.
   Both interfaces give the user total control over the blocking behavior of
   their application, with the unbuffered interface enabling zero-copy IO.
   Parsers are backtracking by default and support unbounded lookahead.

Flag async
  Description: build the async libraries
  Default: false

Flag lwt
  Description: build the lwt libraries
  Default: false

Flag benchmarks
  Description: build benchmark executables
  Default: false

Flag unix
  Description: build the unix library
  Default: true


Library angstrom
  Path:         lib
  Findlibname:  angstrom
  BuildDepends: cstruct (>= 0.6.0), result
  Modules:      Angstrom

Document api
  Title:                Documentation and API reference
  Type:                 ocamlbuild (0.4)
  BuildTools+:          ocamldoc
  Install:              true
  XOCamlBuildPath:      lib
  XOCamlBuildLibraries: angstrom

Library angstrom_unix
  Path:           unix
  Findlibname:    unix
  Findlibparent:  angstrom
  Build$:         flag(unix)
  Install$:       flag(unix)
  BuildDepends:   angstrom, result
  Modules:        Angstrom_unix

Library angstrom_lwt
  Path:           lwt
  Findlibname:    lwt
  Findlibparent:  angstrom
  Build$:         flag(lwt)
  Install$:       flag(lwt)
  BuildDepends:   angstrom, lwt, result
  Modules:        Angstrom_lwt

Library angstrom_async
  Path:           async
  Findlibname:    async
  Findlibparent:  angstrom
  Build$:         flag(async)
  Install$:       flag(async)
  BuildDepends:   angstrom, async, result, threads
  Modules:        Angstrom_async

Executable test_angstrom
  Path:             lib_test
  MainIs:           test_angstrom.ml
  Build$:           flag(tests)
  CompiledObject:   best
  Install:          false
  BuildDepends:     angstrom, alcotest (>= 0.5.0)

Executable pure_benchmark
  Path:             benchmarks
  MainIs:           pure_benchmark.ml
  Build$:           flag(benchmarks)
  CompiledObject:   best
  Install:          false
  BuildDepends:     angstrom, async, core_bench, threads

Executable async_benchmark
  Path:             benchmarks
  MainIs:           async_benchmark.ml
  Build$:           flag(benchmarks)
  CompiledObject:   best
  Install:          false
  BuildDepends:     angstrom, angstrom.async, async, threads

Executable lwt_benchmark
  Path:             benchmarks
  MainIs:           lwt_benchmark.ml
  Build$:           flag(benchmarks)
  CompiledObject:   best
  Install:          false
  BuildDepends:     angstrom, angstrom.lwt, lwt.unix

Test test_angstrom
  Run$:             flag(tests)
  Command:          $test_angstrom
  WorkingDirectory: lib_test
